# This is an example configuration file that might need modifications
# to properly run in your environment
#
# API KEYS
##########
# Some services require you to obtain an API key and provide it here in
# the configuration:
#
#     * OpenExchangeRates (has a free subscription)
#     * Currencylayer (has a a free subscription)
#     * Quandl (has a a free subscription)
#     * BitcoinAverage (has a a free subscription)
#     * Fixer (has a free subscription)
#     * AlphaVantage (has a free subscription)
#     * WorldCoinIndex (has a free subscription)
#
# The corresponding variables can be defined in the `exchanges` key.


# If true, a new price feed needs manual confirmation
confirm: False

# The producer name(s)
producer: $PRODUCER

# Exchange settings (Here, you may need to add API keys)
exchanges:

  ####################################
  # Yahoo: Fiat + Commodities + Crypto + Stocks
  ####################################
  yahoo:
    klass: Yahoo
    quotes:
        - USD
        - EUR
        - RUB
        - CNY
    bases:
        - USD
        - EUR
        - RUB
        - CNY
    separate_quotes:
        "GOLD:USD": #COMEX
            - GC=F
        "SILVER:USD": #COMEX
            - SI=F
        #"PLATINUM:USD": #NY Mercantile
        #    - PL=F
        #"OIL:USD": #Brent Crude Oil
        #    - BZ=F
        #"SP500:USD": #S&P 500
        #    - ^GSPC
        #"NFLX:USD": #Netflix, Inc.
        #    - NFLX
        #"AAPL:USD": #Apple Inc.
        #    - AAPL

  currate:
      klass: Currate
      api_key: your_api_key
      quotes:
          - USD
          - EUR
          - RUB
          - CNY
      bases:
          - USD
          - EUR
          - RUB
          - CNY

  ####################################
  # Fiat Exchange Rates
  ####################################

  #currencylayer:
  #    klass: CurrencyLayer
  #    api_key: your_api_key
  #    free_subscription: False
  #    quotes:
  #        - USD
  #        - EUR
  #        - RUB
  #        - CNY
  #        - XAU

          #- ARS
          #- TRY
          #- SGD
          #- HKD
          #- NZD
          #- CNY
          #- MXN
          #- CAD
          #- CHF
          #- AUD
          #- GBP
          #- JPY
          #- KRW
          #- SEK

  #    bases:
      #    # Only USD with free subscription
      #        - USD
      #        - EUR
      #        - RUB
      #        - CNY
      #aliases:
      #    RUB: RUB



  binance:
      klass: Binance
      quotes:
          - BTC
          - EOS
          - LTC
          - BTS
          - USDT
          - EUR
      bases:
          - BTC
          - USDT
          - RUB

  okcoin:
      klass: Okcoin
      quotes:
          - BTC
      bases:
          - USD

  graphene:
    klass: Graphene
    quotes:
      - GPH
    bases:
      - RUDEX.USDT
      - RUDEX.EOS
      - RUDEX.LTC
      - RUDEX.BTS
      #- RUDEX.BTC
      #- USD
    aliases:
        RUDEX.USDT: USDT
        RUDEX.EOS: EOS
        RUDEX.LTC: LTC
        RUDEX.BTS: BTS
        #RUDEX.BTC: BTC


  ####################################
  # Commodities
  ####################################
  quandl:
    klass: Quandl
    api_key: your_api_key
    datasets:
        "GOLD:USD":
            - LBMA/GOLD
        "SILVER:USD":
            - LBMA/SILVER

  ####################################
  # GOLD and SILVER
  ####################################
  goldprice:
      klass: Goldprice
      quotes:
          - XAU
          - XAG
      bases:
          - USD
      aliases:
          XAU: GOLD
          XAG: SILVER


  bitstamp:
      klass: Bitstamp
      quotes:
          - BTC
      bases:
          - USD

  bittrex:
      klass: Bittrex
      enable: True
      quotes:
          - USD
          - USDT
      bases:
          - USDT
          - USD




# default settings
default:
    # max age of a feed
    maxage: 172800

    # minimum percentage that forces a publish
    min_change: 0.01

    # warn if price change goes above this percentage
    warn_change: 40

    # skip publishing a feed if price goes above this percentage
    skip_change: 50

    # skip publishing a feed if producer is not an active witness.
    skip_inactive_witness: True

    # how to derive a single price from several sources
    # Choose from: "median", "mean", or "weighted" (by volume)
    metric: weighted

    # Select sources for this particular asset. Each source
    # has its own fetch() method and collects several markets
    # any market of an exchanges is considered but only the
    # current asset's price is derived
    #
    # Choose from: - "*": all,
    #              - loaded exchanges (see below)
    sources:
         -*
#        - fixer
#        - binance
#        - currencylayer
#        - btcavg
#        - quandl
#        - bitstamp
#        - okcoin
#        - graphene
#        - poloniex
#        - zb
#        - coinmarketcap
#        - aex
#        - bitshares
#        - lbank
#        - magicwallet
#        -

    # Core exchange factor for paying transaction fees in
    # non-GPH assets. Premium of 10%
    core_exchange_factor: 1.1

    # maintenance collateral ratio (percentage)
    maintenance_collateral_ratio: 200.0

    # Maximum short squeeze ratio
    maximum_short_squeeze_ratio: 110.0

    # If set to True, prices are also derived via 3
    # markets instead of just two:
    # E.g.: GOLD:USD -> USD:BTC -> BTC:NBS = GOLD:NBS
    derive_across_3markets: True

    #loopholes_protection_days: 0.25

# Enabled assets that are derived if no asset is provided via command
# line
assets:
    USD:
    EUR:
    RUB:
    CNY:
      #maximum_short_squeeze_ratio: 102.0
      #core_exchange_factor: 1.2
      #maintenance_collateral_ratio: 1.6
    GOLD:
    SILVER:
    #TRY:
    #AUD:
    #JPY:
    #CHF:
    #MXN:
    #GBP:
    #CAD:
    #ARS:
    #HKD:
    #SEK:
    #SGD:
    #NZD:
    #KRW:

# Intermediate assets are useful for 2 and 3 market price derivation
# E.g.: USD:BTC -> BTC:NBS = USD:NBS
#       GOLD:USD -> USD:BTC -> BTC:NBS = GOLD:NBS
intermediate_assets:
    - USD
    - RUB
    - EUR
    - CNY
    - USDT
    - BTS
    - EOS
    - LTC
    #- BTC

# Historical computed prices storage, to be used in next runs to compute the moving average.
#history:
    # Save as CSV files in a (local) directory
#    klass: FileHistory
#    dirname: prices_db